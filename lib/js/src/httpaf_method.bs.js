// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");

function is_safe(param) {
  if (param >= 3546231) {
    if (param !== 336447077) {
      return param === 801894688;
    } else {
      return true;
    }
  } else if (param !== -539883714) {
    return param >= 3546230;
  } else {
    return true;
  }
}

function is_cacheable(param) {
  if (param !== 3546230 && param !== 801894688) {
    return param === 891112544;
  } else {
    return true;
  }
}

function is_idempotent(t) {
  if (t !== 3997359 && t !== 492530731) {
    return is_safe(t);
  } else {
    return true;
  }
}

function to_string(param) {
  if (typeof param === "number") {
    if (param >= 357830602) {
      if (param >= 801894688) {
        if (param >= 891112544) {
          return "POST";
        } else {
          return "HEAD";
        }
      } else if (param >= 492530731) {
        return "DELETE";
      } else {
        return "CONNECT";
      }
    } else if (param >= 3997359) {
      if (param >= 336447077) {
        return "TRACE";
      } else {
        return "PUT";
      }
    } else if (param >= 3546230) {
      return "GET";
    } else {
      return "OPTIONS";
    }
  } else {
    return param[1];
  }
}

function of_string(s) {
  switch (s) {
    case "CONNECT" : 
        return /* CONNECT */357830602;
    case "DELETE" : 
        return /* DELETE */492530731;
    case "GET" : 
        return /* GET */3546230;
    case "HEAD" : 
        return /* HEAD */801894688;
    case "OPTIONS" : 
        return /* OPTIONS */-539883714;
    case "POST" : 
        return /* POST */891112544;
    case "PUT" : 
        return /* PUT */3997359;
    case "TRACE" : 
        return /* TRACE */336447077;
    default:
      return /* `Other */[
              -912009552,
              s
            ];
  }
}

function pp_hum(fmt, t) {
  return Curry._1(Format.fprintf(fmt, /* Format */[
                  /* String */Block.__(2, [
                      /* No_padding */0,
                      /* End_of_format */0
                    ]),
                  "%s"
                ]), to_string(t));
}

exports.is_safe = is_safe;
exports.is_cacheable = is_cacheable;
exports.is_idempotent = is_idempotent;
exports.to_string = to_string;
exports.of_string = of_string;
exports.pp_hum = pp_hum;
/* Format Not a pure module */
